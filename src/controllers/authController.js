const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const User = require("../models/User");

// ƒêƒÉng k√Ω user
exports.register = async (req, res) => {
  try {
    const { name, email, password, confirmPassword, phone } = req.body;

    if (password !== confirmPassword) {
      return res.status(400).json({ error: "M·∫≠t kh·∫©u kh√¥ng kh·ªõp nhau!" });
    }

    const exists = await User.findOne({ where: { email } });
    if (exists) {
      return res.status(400).json({ error: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    const hashed = await bcrypt.hash(password, 10);
    const user = await User.create({
      name,
      email,
      password: hashed,
      phone,
      role: "user", // m·∫∑c ƒë·ªãnh role l√† user
    });

    res.json(user);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Login cho user (customer)
exports.loginUser = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Nh·∫≠p email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    if (user.role !== "user") {
      return res.status(403).json({ message: "T√†i kho·∫£n kh√¥ng h·ª£p l·ªá" });
    }

    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.json({ token, user });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// Login cho admin
exports.loginAdmin = async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ message: "Nh·∫≠p email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i!" });
    }

    const match = await bcrypt.compare(password, user.password);
    if (!match) {
      return res.status(400).json({ message: "Sai m·∫≠t kh·∫©u" });
    }

    if (user.role !== "admin") {
      return res.status(403).json({ message: "Ch·ªâ admin m·ªõi ƒë∆∞·ª£c ph√©p ƒëƒÉng nh·∫≠p" });
    }

    const token = jwt.sign(
      { id: user.id, role: user.role },
      process.env.JWT_SECRET,
      { expiresIn: "1d" }
    );

    res.json({ token, user });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
};

// =========================
// üß† L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
// =========================
exports.getMe = async (req, res) => {
  try {
    // req.user ƒë∆∞·ª£c g·∫Øn v√†o t·ª´ middleware x√°c th·ª±c token
    const user = await User.findByPk(req.user.id, {
      attributes: ["id", "name", "email", "phone", "role", "createdAt"],
    });

    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    res.json({ success: true, user });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
};

// =========================
// ‚úèÔ∏è C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng
// =========================
exports.updateProfile = async (req, res) => {
  try {
    const { name, phone } = req.body;

    const user = await User.findByPk(req.user.id);
    if (!user) {
      return res.status(404).json({ success: false, message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!" });
    }

    // C·∫≠p nh·∫≠t c√°c tr∆∞·ªùng ƒë∆∞·ª£c cho ph√©p
    user.name = name || user.name;
    user.phone = phone || user.phone;
    await user.save();

    res.json({
      success: true,
      message: "C·∫≠p nh·∫≠t h·ªì s∆° th√†nh c√¥ng!",
      user,
    });
  } catch (err) {
    res.status(500).json({ success: false, error: err.message });
  }
};
